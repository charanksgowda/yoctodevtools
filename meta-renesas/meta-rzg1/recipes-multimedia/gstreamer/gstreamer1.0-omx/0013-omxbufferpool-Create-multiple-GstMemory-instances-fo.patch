From df371a4dfb97d0860fe87d6fac6f85ebb4234068 Mon Sep 17 00:00:00 2001
From: Thao Luong <thao.luong.uw@rvc.renesas.com>
Date: Wed, 27 May 2015 11:20:03 +0700
Subject: [PATCH 09/25] omxbufferpool: Create multiple GstMemory instances for 
 planar color formats

This patch creates multiple GstMemory instances for the number of the
buffer planes of planar color formats and attaches them to a GstBuffer.

refs #69206
Signed-off-by: Thao Luong <thao.luong.uw@rvc.renesas.com>
---
 omx/gstomxbufferpool.c | 29 ++++++++++++++++++++++-------
 1 file changed, 22 insertions(+), 7 deletions(-)

diff --git a/omx/gstomxbufferpool.c b/omx/gstomxbufferpool.c
index 56ea5b1..c5a5bdd 100644
--- a/omx/gstomxbufferpool.c
+++ b/omx/gstomxbufferpool.c
@@ -128,7 +128,7 @@ gst_omx_memory_allocator_init (GstOMXMemoryAllocator * allocator)
 
 static GstMemory *
 gst_omx_memory_allocator_alloc (GstAllocator * allocator, GstMemoryFlags flags,
-    GstOMXBuffer * buf)
+    GstOMXBuffer * buf, gsize offset, gsize size)
 {
   GstOMXMemory *mem;
   gint align;
@@ -155,7 +155,7 @@ gst_omx_memory_allocator_alloc (GstAllocator * allocator, GstMemoryFlags flags,
   mem = g_slice_new (GstOMXMemory);
   /* the shared memory is always readonly */
   gst_memory_init (GST_MEMORY_CAST (mem), flags, allocator, NULL,
-      buf->omx_buf->nAllocLen, align, 0, buf->omx_buf->nAllocLen);
+      buf->omx_buf->nAllocLen, align, offset, size);
 
   mem->buf = buf;
 
@@ -388,12 +388,9 @@ gst_omx_buffer_pool_alloc_buffer (GstBufferPool * bpool,
     const guint nslice = pool->port->port_def.format.video.nSliceHeight;
     gsize offset[GST_VIDEO_MAX_PLANES] = { 0, };
     gint stride[GST_VIDEO_MAX_PLANES] = { nstride, 0, };
+    gsize plane_size[GST_VIDEO_MAX_PLANES] = { 0, };
     GstOMXVideoDecBufferData *vdbuf_data;
-
-    mem = gst_omx_memory_allocator_alloc (pool->allocator, 0, omx_buf);
-    buf = gst_buffer_new ();
-    gst_buffer_append_memory (buf, mem);
-    g_ptr_array_add (pool->buffers, buf);
+    gint i;
 
     switch (GST_VIDEO_INFO_FORMAT (&pool->video_info)) {
       case GST_VIDEO_FORMAT_ABGR:
@@ -410,17 +407,35 @@ gst_omx_buffer_pool_alloc_buffer (GstBufferPool * bpool,
         offset[1] = offset[0] + stride[0] * nslice;
         stride[2] = nstride / 2;
         offset[2] = offset[1] + (stride[1] * nslice / 2);
+        plane_size[0] = nstride *
+            pool->port->port_def.format.video.nFrameHeight;
+        plane_size[1] = plane_size[2] = plane_size[0] / 4;
         break;
       case GST_VIDEO_FORMAT_NV12:
+        stride[1] = nstride;
+        offset[1] = offset[0] + stride[0] * nslice;
+        plane_size[0] = nstride *
+            pool->port->port_def.format.video.nFrameHeight;
+        plane_size[1] = plane_size[0] / 2;
       case GST_VIDEO_FORMAT_NV16:
         stride[1] = nstride;
         offset[1] = offset[0] + stride[0] * nslice;
+        plane_size[0] = plane_size[1] = nstride *
+            pool->port->port_def.format.video.nFrameHeight;
         break;
       default:
         g_assert_not_reached ();
         break;
     }
 
+    buf = gst_buffer_new ();
+    for (i = 0; i < GST_VIDEO_INFO_N_PLANES (&pool->video_info); i++)
+      gst_buffer_append_memory (buf,
+          gst_omx_memory_allocator_alloc (pool->allocator, 0, omx_buf,
+              offset[i], plane_size[i]));
+
+    g_ptr_array_add (pool->buffers, buf);
+
     if (pool->add_videometa) {
       pool->need_copy = FALSE;
     } else {
-- 
2.4.0

