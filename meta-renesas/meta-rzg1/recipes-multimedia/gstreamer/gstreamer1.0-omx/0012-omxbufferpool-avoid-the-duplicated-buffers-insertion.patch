From 931c38b9caf12ac1b5d45a3e113fb06160a520ec Mon Sep 17 00:00:00 2001
From: Thao Luong <thao.luong.uw@rvc.renesas.com>
Date: Wed, 27 May 2015 11:11:33 +0700
Subject: [PATCH 08/25] omxbufferpool: avoid the duplicated buffers insertion 
 into the component.

The buffer pool attempts to insert the output buffers from AllocateBuffer()
into the omxil component when the buffer pool is activated in dec_loop().
Also set_format(), which is invoked before dec_loop(), sends
the output buffers into the component with gst_omx_port_populate(),
which causes a malfunction in the buffer management for the duplicated
buffers insertion.

However the output buffer insertion into the omx component in set_format()
is necessary because the caps which the buffer pool needs to be configured
is determined after the first frame has been decoded, which can be noticed
from the output frame acquisition processing in dec_loop().

This patch uses the already_acquired flag to avoid the duplicated
buffers insertion into the component. The flag is set once
the buffer is obtained by gst_buffer_pool_acquire_buffer() or in drop frame
case of dec_loop(). Only release the buffer back to the output port
(buffer_release()) when this flag is set.

refs #69206
Signed-off-by: Thao Luong <thao.luong.uw@rvc.renesas.com>
---
 omx/gstomxbufferpool.c | 33 ++++++++++++++++++++++++++++++++-
 omx/gstomxbufferpool.h |  6 ++++++
 omx/gstomxvideodec.c   | 10 ++++++++++
 3 files changed, 48 insertions(+), 1 deletion(-)

diff --git a/omx/gstomxbufferpool.c b/omx/gstomxbufferpool.c
index b57612d..56ea5b1 100644
--- a/omx/gstomxbufferpool.c
+++ b/omx/gstomxbufferpool.c
@@ -388,6 +388,7 @@ gst_omx_buffer_pool_alloc_buffer (GstBufferPool * bpool,
     const guint nslice = pool->port->port_def.format.video.nSliceHeight;
     gsize offset[GST_VIDEO_MAX_PLANES] = { 0, };
     gint stride[GST_VIDEO_MAX_PLANES] = { nstride, 0, };
+    GstOMXVideoDecBufferData *vdbuf_data;
 
     mem = gst_omx_memory_allocator_alloc (pool->allocator, 0, omx_buf);
     buf = gst_buffer_new ();
@@ -452,6 +453,11 @@ gst_omx_buffer_pool_alloc_buffer (GstBufferPool * bpool,
           GST_VIDEO_INFO_WIDTH (&pool->video_info),
           GST_VIDEO_INFO_HEIGHT (&pool->video_info),
           GST_VIDEO_INFO_N_PLANES (&pool->video_info), offset, stride);
+      /* Initialize an already_acquired flag */
+      vdbuf_data = g_slice_new (GstOMXVideoDecBufferData);
+      vdbuf_data->already_acquired = FALSE;
+  
+      omx_buf->private_data = (void *) vdbuf_data;
     }
   }
 
@@ -469,6 +475,7 @@ static void
 gst_omx_buffer_pool_free_buffer (GstBufferPool * bpool, GstBuffer * buffer)
 {
   GstOMXBufferPool *pool = GST_OMX_BUFFER_POOL (bpool);
+  GstOMXBuffer *omx_buf;
 
   /* If the buffers belong to another pool, restore them now */
   GST_OBJECT_LOCK (pool);
@@ -478,6 +485,12 @@ gst_omx_buffer_pool_free_buffer (GstBufferPool * bpool, GstBuffer * buffer)
   }
   GST_OBJECT_UNLOCK (pool);
 
+  omx_buf =
+      gst_mini_object_get_qdata (GST_MINI_OBJECT_CAST (buffer),
+      gst_omx_buffer_data_quark);
+
+  g_slice_free (gboolean, omx_buf->private_data);
+
   gst_mini_object_set_qdata (GST_MINI_OBJECT_CAST (buffer),
       gst_omx_buffer_data_quark, NULL, NULL);
 
@@ -494,12 +507,22 @@ gst_omx_buffer_pool_acquire_buffer (GstBufferPool * bpool,
 
   if (pool->port->port_def.eDir == OMX_DirOutput) {
     GstBuffer *buf;
+    GstOMXBuffer *omx_buf;
+    GstOMXVideoDecBufferData *vdbuf_data;
 
     g_return_val_if_fail (pool->current_buffer_index != -1, GST_FLOW_ERROR);
 
     buf = g_ptr_array_index (pool->buffers, pool->current_buffer_index);
     g_return_val_if_fail (buf != NULL, GST_FLOW_ERROR);
     *buffer = buf;
+
+    omx_buf =
+        gst_mini_object_get_qdata (GST_MINI_OBJECT_CAST (buf),
+        gst_omx_buffer_data_quark);
+
+    vdbuf_data = (GstOMXVideoDecBufferData *) omx_buf->private_data;
+    vdbuf_data->already_acquired = TRUE;
+
     ret = GST_FLOW_OK;
 
     /* If it's our own memory we have to set the sizes */
@@ -531,10 +554,17 @@ gst_omx_buffer_pool_release_buffer (GstBufferPool * bpool, GstBuffer * buffer)
   g_assert (pool->component && pool->port);
 
   if (!pool->allocating && !pool->deactivated) {
+    GstOMXVideoDecBufferData *vdbuf_data;
+
     omx_buf =
         gst_mini_object_get_qdata (GST_MINI_OBJECT_CAST (buffer),
         gst_omx_buffer_data_quark);
-    if (pool->port->port_def.eDir == OMX_DirOutput && !omx_buf->used) {
+
+    vdbuf_data = (GstOMXVideoDecBufferData *) omx_buf->private_data;
+
+    if (pool->port->port_def.eDir == OMX_DirOutput && !omx_buf->used &&
+        vdbuf_data->already_acquired) {
+      vdbuf_data = (GstOMXVideoDecBufferData *) omx_buf->private_data;
       /* Release back to the port, can be filled again */
       err = gst_omx_port_release_buffer (pool->port, omx_buf);
       if (err != OMX_ErrorNone) {
@@ -542,6 +572,7 @@ gst_omx_buffer_pool_release_buffer (GstBufferPool * bpool, GstBuffer * buffer)
             ("Failed to relase output buffer to component: %s (0x%08x)",
                 gst_omx_error_to_string (err), err));
       }
+      vdbuf_data->already_acquired = FALSE;
     } else if (!omx_buf->used) {
       /* TODO: Implement.
        *
diff --git a/omx/gstomxbufferpool.h b/omx/gstomxbufferpool.h
index 76f9680..a8c0dc4 100644
--- a/omx/gstomxbufferpool.h
+++ b/omx/gstomxbufferpool.h
@@ -42,6 +42,7 @@ G_BEGIN_DECLS
 
 typedef struct _GstOMXBufferPool GstOMXBufferPool;
 typedef struct _GstOMXBufferPoolClass GstOMXBufferPoolClass;
+typedef struct _GstOMXVideoDecBufferData GstOMXVideoDecBufferData;
 
 struct _GstOMXBufferPool
 {
@@ -85,6 +86,11 @@ struct _GstOMXBufferPoolClass
   GstVideoBufferPoolClass parent_class;
 };
 
+struct _GstOMXVideoDecBufferData
+{
+  gboolean already_acquired;
+};
+
 GType gst_omx_buffer_pool_get_type (void);
 
 GstBufferPool *gst_omx_buffer_pool_new (GstElement * element, GstOMXComponent * component, GstOMXPort * port);
diff --git a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
index 2b14fc4..104d0f7 100644
--- a/omx/gstomxvideodec.c
+++ b/omx/gstomxvideodec.c
@@ -1526,11 +1526,21 @@ gst_omx_video_dec_loop (GstOMXVideoDec * self)
   if (frame
       && (deadline = gst_video_decoder_get_max_decode_time
           (GST_VIDEO_DECODER (self), frame)) < 0) {
+    GstOMXVideoDecBufferData *vdbuf_data;
+
     GST_WARNING_OBJECT (self,
         "Frame is too late, dropping (deadline %" GST_TIME_FORMAT ")",
         GST_TIME_ARGS (-deadline));
     flow_ret = gst_video_decoder_drop_frame (GST_VIDEO_DECODER (self), frame);
     frame = NULL;
+    if (self->out_port_pool)
+    {
+      /* Sets the already_acquired flag a GstOMXBuffer buffer has
+       * in the case of the frame dropping, similar to the buffer acquisition.
+       */
+      vdbuf_data = (GstOMXVideoDecBufferData *) buf->private_data;
+      vdbuf_data->already_acquired = TRUE;
+    }
   } else if (!frame && (buf->omx_buf->nFilledLen > 0 || buf->eglimage)) {
     GstBuffer *outbuf = NULL;
 
-- 
2.4.0

