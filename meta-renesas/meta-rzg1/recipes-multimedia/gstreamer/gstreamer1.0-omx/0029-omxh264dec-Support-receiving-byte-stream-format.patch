From b69bc99b2bab2d57edde34ebac683de22e82a3ea Mon Sep 17 00:00:00 2001
From: Thao Luong <thao.luong.uw@rvc.renesas.com>
Date: Wed, 27 May 2015 11:45:38 +0700
Subject: [PATCH 24/25] omxh264dec: Support receiving byte-stream format

This patch will support receiving byte-stream format for
for omxh264dec. It will detect input format is avc or byte-stream
from caps to decide transforming avc format to byte-stream is
necessary or not.

refs #69206
Signed-off-by: Thao Luong <thao.luong.uw@rvc.renesas.com>
---
 omx/gstomxh264dec.c | 132 ++++++++++++++++++++++++++++++++--------------------
 omx/gstomxh264dec.h |   2 +
 2 files changed, 83 insertions(+), 51 deletions(-)

diff --git a/omx/gstomxh264dec.c b/omx/gstomxh264dec.c
index 929a9b6..651816f 100644
--- a/omx/gstomxh264dec.c
+++ b/omx/gstomxh264dec.c
@@ -68,7 +68,7 @@ gst_omx_h264_dec_class_init (GstOMXH264DecClass * klass)
 
   videodec_class->cdata.default_sink_template_caps = "video/x-h264, "
       "alignment=(string) au, "
-      "stream-format=(string) avc, "
+      "stream-format=(string) { avc, byte-stream }, "
       "width=(int) [1,MAX], " "height=(int) [1,MAX]";
 
   gst_element_class_set_static_metadata (element_class,
@@ -189,34 +189,47 @@ gst_omx_h264_dec_set_format (GstOMXVideoDec * dec, GstOMXPort * port,
   OMX_ERRORTYPE err;
   GstMapInfo map = GST_MAP_INFO_INIT;
   GstBuffer *new_codec_data;
+  GstStructure *s;
+  const gchar *stream_format;
+  self->avc_format = FALSE;
 
   gst_omx_port_get_port_definition (port, &port_def);
   port_def.format.video.eCompressionFormat = OMX_VIDEO_CodingAVC;
-  err = gst_omx_port_update_port_definition (port, &port_def);
-  if (err != OMX_ErrorNone)
-    return FALSE;
-
-  gst_buffer_map (state->codec_data, &map, GST_MAP_READ);
-
-  /* Get the nal length field size from lengthSizeMinusOne field,
-   * which is contained in AVC Configuration.
-   */
-  self->nal_length_field_size = (map.data[4] & 0x03) + 1;
-
-  /* Retrieve sps and pps nals from codec_data, transformed into bytestream */
-  new_codec_data = gst_omx_h264_dec_retrieve_sps_pps (self, map.data);
-  if (!new_codec_data) {
-    GST_ERROR_OBJECT (self,
-        "failed sps and pps nals retrieval from codec_data");
-    gst_buffer_unmap (state->codec_data, &map);
-    return FALSE;
-  }
 
-  gst_buffer_unmap (state->codec_data, &map);
+  s = gst_caps_get_structure (state->caps, 0);
+  stream_format = gst_structure_get_string (s, "stream-format");
+
+  if (strcmp (stream_format, "avc") == 0)
+  {
+    self->avc_format = TRUE;
+    err = gst_omx_port_update_port_definition (port, &port_def);
+    if (err != OMX_ErrorNone)
+      return FALSE;
+
+    gst_buffer_map (state->codec_data, &map, GST_MAP_READ);
+
+    /* Get the nal length field size from lengthSizeMinusOne field,
+     * which is contained in AVC Configuration.
+     */
+    self->nal_length_field_size = (map.data[4] & 0x03) + 1;
+
+    /* Retrieve sps and pps nals from codec_data, transformed into bytestream */
+    new_codec_data = gst_omx_h264_dec_retrieve_sps_pps (self, map.data);
+    if (!new_codec_data) {
+      GST_ERROR_OBJECT (self,
+          "failed sps and pps nals retrieval from codec_data");
+      gst_buffer_unmap (state->codec_data, &map);
+      return FALSE;
+    }
+
+    gst_buffer_unmap (state->codec_data, &map);
 
-  gst_buffer_replace (&state->codec_data, new_codec_data);
-  gst_buffer_unref (new_codec_data);
-  ret = TRUE;
+    gst_buffer_replace (&state->codec_data, new_codec_data);
+    gst_buffer_unref (new_codec_data);
+    ret = TRUE;
+  } else {
+    ret = gst_omx_port_update_port_definition (port, &port_def) == OMX_ErrorNone;
+  }
 
   {
     /*
@@ -293,42 +306,59 @@ gst_omx_h264_dec_copy_frame_buffer (GstOMXVideoDec * dec, GstBuffer * inbuf,
   GstMapInfo map = GST_MAP_INFO_INIT;
   guint8 *in_data, *out_data;
 
-  gst_buffer_map (inbuf, &map, GST_MAP_READ);
+  if (self->avc_format)
+  {
+    gst_buffer_map (inbuf, &map, GST_MAP_READ);
 
-  /* Transform AVC format into bytestream and copy frames */
-  in_data = map.data + offset;
-  out_data = outbuf->omx_buf->pBuffer + outbuf->omx_buf->nOffset;
-  inbuf_size = gst_buffer_get_size (inbuf) - offset;
-  outbuf_size = outbuf->omx_buf->nAllocLen - outbuf->omx_buf->nOffset;
-  nal_size = gst_omx_h264_dec_get_nal_size (self, in_data);
-  while (output_amount + nal_size + 4 <= outbuf_size) {
-    guint inbuf_to_next, outbuf_to_next;
+    /* Transform AVC format into bytestream and copy frames */
+    in_data = map.data + offset;
+    out_data = outbuf->omx_buf->pBuffer + outbuf->omx_buf->nOffset;
+    inbuf_size = gst_buffer_get_size (inbuf) - offset;
+    outbuf_size = outbuf->omx_buf->nAllocLen - outbuf->omx_buf->nOffset;
+    nal_size = gst_omx_h264_dec_get_nal_size (self, in_data);
+    while (output_amount + nal_size + 4 <= outbuf_size) {
+      guint inbuf_to_next, outbuf_to_next;
 
-    out_data[0] = 0x00;
-    out_data[1] = 0x00;
-    out_data[2] = 0x00;
-    out_data[3] = 0x01;
+      out_data[0] = 0x00;
+      out_data[1] = 0x00;
+      out_data[2] = 0x00;
+      out_data[3] = 0x01;
 
-    memcpy (out_data + 4, in_data + self->nal_length_field_size, nal_size);
+      memcpy (out_data + 4, in_data + self->nal_length_field_size, nal_size);
 
-    outbuf_to_next = nal_size + 4;
-    out_data += outbuf_to_next;
-    output_amount += outbuf_to_next;
+      outbuf_to_next = nal_size + 4;
+      out_data += outbuf_to_next;
+      output_amount += outbuf_to_next;
 
-    inbuf_to_next = nal_size + self->nal_length_field_size;
-    inbuf_consumed += inbuf_to_next;
-    if ((inbuf_size - inbuf_consumed) < self->nal_length_field_size)
-      /* the end of an input buffer */
-      break;
+      inbuf_to_next = nal_size + self->nal_length_field_size;
+      inbuf_consumed += inbuf_to_next;
+      if ((inbuf_size - inbuf_consumed) < self->nal_length_field_size)
+        /* the end of an input buffer */
+        break;
 
-    in_data += inbuf_to_next;
+      in_data += inbuf_to_next;
 
-    nal_size = gst_omx_h264_dec_get_nal_size (self, in_data);
-  }
+      nal_size = gst_omx_h264_dec_get_nal_size (self, in_data);
+    }
+
+    gst_buffer_unmap (inbuf, &map);
 
-  gst_buffer_unmap (inbuf, &map);
+    outbuf->omx_buf->nFilledLen = output_amount;
+  } else {
+    guint size;
 
-  outbuf->omx_buf->nFilledLen = output_amount;
+    size = gst_buffer_get_size (inbuf);
+
+    /* Copy the buffer content in chunks of size as requested
+     * by the port */
+    outbuf->omx_buf->nFilledLen =
+        MIN (size - offset,
+        outbuf->omx_buf->nAllocLen - outbuf->omx_buf->nOffset);
+    gst_buffer_extract (inbuf, offset,
+        outbuf->omx_buf->pBuffer + outbuf->omx_buf->nOffset,
+        outbuf->omx_buf->nFilledLen);
+    inbuf_consumed = outbuf->omx_buf->nFilledLen;
+  }
 
   return inbuf_consumed;
 }
diff --git a/omx/gstomxh264dec.h b/omx/gstomxh264dec.h
index ae9523a..8444903 100644
--- a/omx/gstomxh264dec.h
+++ b/omx/gstomxh264dec.h
@@ -48,6 +48,8 @@ struct _GstOMXH264Dec
   GstOMXVideoDec parent;
 
   guint nal_length_field_size;
+  /* Flag to check whether input is avc format or not */
+  gboolean avc_format
 };
 
 struct _GstOMXH264DecClass
-- 
2.4.0

