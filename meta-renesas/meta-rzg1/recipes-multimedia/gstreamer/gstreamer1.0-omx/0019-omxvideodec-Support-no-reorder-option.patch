From 7f67e514f9e1cede80eb697f01359befbed37b85 Mon Sep 17 00:00:00 2001
From: Thao Luong <thao.luong.uw@rvc.renesas.com>
Date: Wed, 27 May 2015 11:34:54 +0700
Subject: [PATCH 15/25] omxvideodec: Support no-reorder option

Base on X11, this patch appends the interface, no-reorder = true/false,
that changes frame reordering option of Renesas's OMX decoder module
to omxh264dec element.

no-reorder = false :
  It is the default value of Renesas's OMX decoder. When it is set,
  results of decoding is passed to next element with consideration
  for the appearance of B-frames.

no-reorder = true :
  It is the extension value of Renesas's OMX decoder. When it is set,
  results of decoding is passed to next element as soon as possible.
  When processing video that is encoded without B-frames, latency of
  decoding is reduced.

refs #69206
Signed-off-by: Thao Luong <thao.luong.uw@rvc.renesas.com>
---
 omx/gstomxbufferpool.h |  2 +-
 omx/gstomxh264dec.c    | 55 ++++++++++++++++++++++++++++++++++++++++++++++++++
 omx/gstomxvideodec.c   | 23 ++++++++++++++++++---
 omx/gstomxvideodec.h   |  2 ++
 4 files changed, 78 insertions(+), 4 deletions(-)

diff --git a/omx/gstomxbufferpool.h b/omx/gstomxbufferpool.h
index 3558ef9..3e6a913 100644
--- a/omx/gstomxbufferpool.h
+++ b/omx/gstomxbufferpool.h
@@ -33,8 +33,8 @@
 #ifdef HAVE_MMNGRBUF
 #include "gst/allocators/gstdmabuf.h"
 #include "mmngr_buf_user_public.h"
-#include "OMXR_Extension_vdcmn.h"
 #endif
+#include "OMXR_Extension_vdcmn.h"
 
 G_BEGIN_DECLS
 
diff --git a/omx/gstomxh264dec.c b/omx/gstomxh264dec.c
index 2581889..094a22a 100644
--- a/omx/gstomxh264dec.c
+++ b/omx/gstomxh264dec.c
@@ -1,6 +1,7 @@
 /*
  * Copyright (C) 2011, Hewlett-Packard Development Company, L.P.
  *   Author: Sebastian Dr√∂ge <sebastian.droege@collabora.co.uk>, Collabora Ltd.
+ * Copyright (C) 2015, Renesas Electronics Corporation
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -25,6 +26,9 @@
 #include <gst/gst.h>
 
 #include "gstomxh264dec.h"
+#include "OMXR_Extension_h264d.h"
+#include "OMXR_Extension_vdcmn.h"
+ 
 
 GST_DEBUG_CATEGORY_STATIC (gst_omx_h264_dec_debug_category);
 #define GST_CAT_DEFAULT gst_omx_h264_dec_debug_category
@@ -97,5 +101,56 @@ gst_omx_h264_dec_set_format (GstOMXVideoDec * dec, GstOMXPort * port,
   port_def.format.video.eCompressionFormat = OMX_VIDEO_CodingAVC;
   ret = gst_omx_port_update_port_definition (port, &port_def) == OMX_ErrorNone;
 
+  {
+    /*
+     * Setting store unit mode (input port only)
+     *
+     * Can set:
+     *
+     *   OMXR_MC_VIDEO_StoreUnitEofSeparated    (default) :
+     *     Each OMX buffer sent to input port will contains a frame data
+     *      (many NALs, each NAL must have start code)
+     *
+     *   OMXR_MC_VIDEO_StoreUnitTimestampSeparated        :
+     *     Each OMX buffer sent to input port will contains a NAL data
+     *      (without or without start code)
+     */
+    OMXR_MC_VIDEO_PARAM_STREAM_STORE_UNITTYPE sStore;
+    GST_OMX_INIT_STRUCT (&sStore);
+    sStore.nPortIndex = dec->dec_in_port->index;
+
+    sStore.eStoreUnit = OMXR_MC_VIDEO_StoreUnitEofSeparated;  /* default */
+    gst_omx_component_set_parameter
+      (dec->dec, OMXR_MC_IndexParamVideoStreamStoreUnit, &sStore);
+
+
+    /*
+     * Setting reorder mode (output port only)
+     */
+    OMXR_MC_VIDEO_PARAM_REORDERTYPE sReorder;
+    GST_OMX_INIT_STRUCT (&sReorder);
+    sReorder.nPortIndex = dec->dec_out_port->index;  /* default */
+
+    if (dec->no_reorder != FALSE)
+      sReorder.bReorder = OMX_FALSE;
+    else
+      sReorder.bReorder = OMX_TRUE;
+
+    gst_omx_component_set_parameter
+      (dec->dec, OMXR_MC_IndexParamVideoReorder, &sReorder);
+
+
+    /*
+     * Setting de-interlace mode (output port only)
+     */
+    OMXR_MC_VIDEO_PARAM_DEINTERLACE_MODETYPE sDeinterlace;
+    GST_OMX_INIT_STRUCT (&sDeinterlace);
+    sDeinterlace.nPortIndex = dec->dec_out_port->index;
+
+    sDeinterlace.eDeinterlace = OMXR_MC_VIDEO_Deinterlace3DHalf; /* default */
+    gst_omx_component_set_parameter
+      (dec->dec, OMXR_MC_IndexParamVideoDeinterlaceMode, &sDeinterlace);
+  }
+
   return ret;
 }
diff --git a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
index 0707468..d136e4d 100644
--- a/omx/gstomxvideodec.c
+++ b/omx/gstomxvideodec.c
@@ -100,7 +100,8 @@ enum
 {
   PROP_0,
   PROP_NO_COPY,
-  PROP_USE_DMABUF
+  PROP_USE_DMABUF,
+  PROP_NO_REORDER
 };
 
 /* class initialization */
@@ -159,6 +160,11 @@ gst_omx_video_dec_class_init (GstOMXVideoDecClass * klass)
         "Whether or not to transfer decoded data using dmabuf",
         TRUE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
         GST_PARAM_MUTABLE_READY));
+  g_object_class_install_property (gobject_class, PROP_NO_REORDER,
+        g_param_spec_boolean ("no-reorder", "Use video frame without reordering",
+          "Whether or not to use video frame reordering",
+          FALSE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+           GST_PARAM_MUTABLE_READY));
 }
 
 static void
@@ -172,6 +178,7 @@ gst_omx_video_dec_init (GstOMXVideoDec * self)
 #ifdef HAVE_MMNGRBUF
   self->use_dmabuf = TRUE;
 #endif
+  self->no_reorder = FALSE;
 }
 
 static gboolean
@@ -1535,8 +1542,12 @@ gst_omx_video_dec_loop (GstOMXVideoDec * self)
    * stream, corrupted input data...
    * In any cases, not likely to be seen again. so drop it before they pile up
    * and use all the memory. */
-  gst_omx_video_dec_clean_older_frames (self, buf,
-      gst_video_decoder_get_frames (GST_VIDEO_DECODER (self)));
+  if (self->no_reorder == FALSE)
+    /* Only clean older frames in reorder mode. Do not clean in
+     * no_reorder mode, as in that mode the output frames are not in
+     * display order */
+    gst_omx_video_dec_clean_older_frames (self, buf,
+        gst_video_decoder_get_frames (GST_VIDEO_DECODER (self)));
 
   if (frame
       && (deadline = gst_video_decoder_get_max_decode_time
@@ -2878,6 +2889,9 @@ gst_omx_video_dec_set_property (GObject * object, guint prop_id,
     case PROP_USE_DMABUF:
       self->use_dmabuf = g_value_get_boolean (value);
       break;
+    case PROP_NO_REORDER:
+      self->no_reorder = g_value_get_boolean (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -2896,6 +2910,9 @@ gst_omx_video_dec_get_property (GObject * object, guint prop_id,
     case PROP_USE_DMABUF:
       g_value_set_boolean (value, self->use_dmabuf);
       break;
+    case PROP_NO_REORDER:
+      g_value_set_boolean (value, self->no_reorder);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
diff --git a/omx/gstomxvideodec.h b/omx/gstomxvideodec.h
index 80c853d..9bcac47 100644
--- a/omx/gstomxvideodec.h
+++ b/omx/gstomxvideodec.h
@@ -84,6 +84,8 @@ struct _GstOMXVideoDec
   gboolean no_copy;
   /* Set TRUE to transfer decoded data to downstream using dmabuf */
   gboolean use_dmabuf;
+  /* Set TRUE to not using frame reorder */
+  gboolean no_reorder;
 
   GstFlowReturn downstream_flow_ret;
 #ifdef USE_OMX_TARGET_RPI
-- 
2.4.0

