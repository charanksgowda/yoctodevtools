From 0433a570f7cfc58581ae0fe4fc9bbfc0318a0c13 Mon Sep 17 00:00:00 2001
From: Thao Luong <thao.luong.uw@rvc.renesas.com>
Date: Wed, 27 May 2015 10:50:26 +0700
Subject: [PATCH 04/25] omxvideodec: Support no-copy mode for omxh264dec

This patch add a new mode for omxh264dec (no-copy)
With no-copy mode (no-copy=true) omxh264dec create a new GstBuffer
contain user pointer point to decoded OMXBuffer then send it to
downstream. Downstream can get data from that pointer
With this method, copying from decoded OMX buffer
to GST output buffer is not used.
And it will increase performance for decode

In default, no-copy=false. To enable it set no-copy=true in pipeline
Ex:
gst-launch-1.0 filesrc location=.mp4 ! qtdemux ! h264parse ! omxh264dec no-copy=true ! v4l2sink device=`media-ctl -d /dev/media0 -e "vsp1.2 rpf.0 input"` io-mode=userptr

refs #69206
Signed-off-by: Thao Luong <thao.luong.uw@rvc.renesas.com>
---
 omx/gstomxvideodec.c | 212 +++++++++++++++++++++++++++++++++++++++++++++++----
 omx/gstomxvideodec.h |   6 ++
 2 files changed, 205 insertions(+), 13 deletions(-)

diff --git a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
index a47f0ca..9e54c43 100644
--- a/omx/gstomxvideodec.c
+++ b/omx/gstomxvideodec.c
@@ -56,6 +56,13 @@
 GST_DEBUG_CATEGORY_STATIC (gst_omx_video_dec_debug_category);
 #define GST_CAT_DEFAULT gst_omx_video_dec_debug_category
 
+/* User data and function for release OMX buffer in no-copy mode */
+struct GstOMXBufferCallback
+{
+  GstOMXPort   * out_port;
+  GstOMXBuffer * buf;
+};
+
 /* prototypes */
 static void gst_omx_video_dec_finalize (GObject * object);
 
@@ -83,10 +90,16 @@ static OMX_ERRORTYPE gst_omx_video_dec_allocate_output_buffers (GstOMXVideoDec *
     self);
 static OMX_ERRORTYPE gst_omx_video_dec_deallocate_output_buffers (GstOMXVideoDec
     * self);
+static void gst_omx_video_dec_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec);
+static void gst_omx_video_dec_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec);
+static void GstOMXBufCallbackfunc (struct GstOMXBufferCallback *release);
 
 enum
 {
-  PROP_0
+  PROP_0,
+  PROP_NO_COPY
 };
 
 /* class initialization */
@@ -107,6 +120,8 @@ gst_omx_video_dec_class_init (GstOMXVideoDecClass * klass)
   GstVideoDecoderClass *video_decoder_class = GST_VIDEO_DECODER_CLASS (klass);
 
   gobject_class->finalize = gst_omx_video_dec_finalize;
+  gobject_class->set_property = gst_omx_video_dec_set_property;
+  gobject_class->get_property = gst_omx_video_dec_get_property;
 
   element_class->change_state =
       GST_DEBUG_FUNCPTR (gst_omx_video_dec_change_state);
@@ -133,6 +148,11 @@ gst_omx_video_dec_class_init (GstOMXVideoDecClass * klass)
       "video/x-raw, "
       "width = " GST_VIDEO_SIZE_RANGE ", "
       "height = " GST_VIDEO_SIZE_RANGE ", " "framerate = " GST_VIDEO_FPS_RANGE;
+  g_object_class_install_property (gobject_class, PROP_NO_COPY,
+    g_param_spec_boolean ("no-copy", "No copy",
+      "Whether or not to transfer decoded data without copy",
+      FALSE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+      GST_PARAM_MUTABLE_READY));
 }
 
 static void
@@ -142,6 +162,7 @@ gst_omx_video_dec_init (GstOMXVideoDec * self)
 
   g_mutex_init (&self->drain_lock);
   g_cond_init (&self->drain_cond);
+  self->no_copy = FALSE;
 }
 
 static gboolean
@@ -1246,6 +1267,117 @@ copy_frame (const GstVideoInfo * info, GstBuffer * outbuf)
   return tmpbuf;
 }
 
+static void GstOMXBufCallbackfunc (struct GstOMXBufferCallback *release)
+{
+  gint i;
+
+  if (!release)
+    return;
+
+  if (release->buf != NULL) {
+    gst_omx_port_release_buffer (release->out_port, release->buf);
+  }
+
+  g_free (release);
+}
+
+static GstBuffer *
+gst_omx_video_dec_create_buffer_from_omx_output (GstOMXVideoDec * self,
+    GstOMXBuffer * buf)
+{
+  GstVideoCodecState *state =
+      gst_video_decoder_get_output_state (GST_VIDEO_DECODER (self));
+  GstVideoInfo *vinfo = &state->info;
+  GstBuffer *outBuf;
+  guint8 *data;
+  gsize max_size;
+  gsize plane_size[GST_VIDEO_MAX_PLANES] = { 0 };
+  gsize offset[GST_VIDEO_MAX_PLANES] = { 0 };
+  gint stride[GST_VIDEO_MAX_PLANES] = { 0 };
+  GstVideoFormat format;
+  OMX_PARAM_PORTDEFINITIONTYPE *port_def = &self->dec_out_port->port_def;
+  gint i;
+  gint offs, used_size;
+  GstMemory *mem;
+
+  format = GST_VIDEO_INFO_FORMAT (vinfo);
+
+  switch (format) {
+    case GST_VIDEO_FORMAT_I420:
+      stride[0] = port_def->format.video.nStride;
+      stride[1] = stride[2] = port_def->format.video.nStride / 2;
+      offset[1] = port_def->format.video.nSliceHeight *
+          port_def->format.video.nStride;
+      offset[2] = offset[1] +
+          stride[1] * port_def->format.video.nSliceHeight / 2;
+      plane_size[0] = port_def->format.video.nStride *
+          port_def->format.video.nFrameHeight;
+      plane_size[1] = plane_size[2] = plane_size[0] / 4;
+
+      break;
+    case GST_VIDEO_FORMAT_NV12:
+      stride[0] = stride[1] = port_def->format.video.nStride;
+      offset[1] = port_def->format.video.nSliceHeight *
+          port_def->format.video.nStride;
+      plane_size[0] = port_def->format.video.nStride *
+          port_def->format.video.nFrameHeight;
+      plane_size[1] = plane_size[0] / 2;
+
+      break;
+    default:
+      GST_ERROR_OBJECT (self, "Unsupported color format: %d", format);
+      return NULL;
+  }
+
+  outBuf = gst_buffer_new ();
+
+  data = buf->omx_buf->pBuffer + buf->omx_buf->nOffset;
+  max_size = buf->omx_buf->nFilledLen;
+
+  offs = 0;
+  for (i = 0; i < GST_VIDEO_INFO_N_PLANES(vinfo); i++)
+  {
+    used_size = stride[i] *
+      GST_VIDEO_FORMAT_INFO_SCALE_HEIGHT (vinfo->finfo, i, port_def->format.video.nFrameHeight);
+    if (i == 0) {
+      struct GstOMXBufferCallback *release;
+      release = g_malloc (sizeof(struct GstOMXBufferCallback));
+      release->out_port = self->dec_out_port;
+      release->buf = buf;
+      /* Add callback function to release OMX buffer to first plane */
+      mem = gst_memory_new_wrapped (GST_MEMORY_FLAG_READONLY,
+        buf->omx_buf->pBuffer + buf->omx_buf->nOffset + offs,
+        plane_size[i], 0, used_size, release, GstOMXBufCallbackfunc);
+    } else {
+      /* Only release OMX buffer one time. Do not add callback
+       * function to other planes
+       * (These planes are from same OMX buffer) */
+      mem = gst_memory_new_wrapped (GST_MEMORY_FLAG_READONLY,
+        buf->omx_buf->pBuffer + buf->omx_buf->nOffset + offs,
+        plane_size[i], 0, used_size, NULL, NULL);
+    }
+    gst_buffer_append_memory (outBuf, mem);
+    offs += plane_size[i];
+  }
+
+  /* Add video meta data, which is needed to map frame */
+  gst_buffer_add_video_meta_full (outBuf, GST_VIDEO_FRAME_FLAG_NONE,
+      format, port_def->format.video.nFrameWidth,
+      port_def->format.video.nFrameHeight,
+      GST_VIDEO_INFO_N_PLANES(vinfo), offset, stride);
+
+  /* Set timestamp */
+  GST_BUFFER_PTS (outBuf) =
+      gst_util_uint64_scale (buf->omx_buf->nTimeStamp, GST_SECOND,
+      OMX_TICKS_PER_SECOND);
+  if (buf->omx_buf->nTickCount != 0)
+    GST_BUFFER_DURATION (outBuf) =
+        gst_util_uint64_scale (buf->omx_buf->nTickCount, GST_SECOND,
+        OMX_TICKS_PER_SECOND);
+
+  return outBuf;
+}
+
 static void
 gst_omx_video_dec_loop (GstOMXVideoDec * self)
 {
@@ -1487,20 +1619,42 @@ gst_omx_video_dec_loop (GstOMXVideoDec * self)
       frame = NULL;
       buf = NULL;
     } else {
-      if ((flow_ret =
-              gst_video_decoder_allocate_output_frame (GST_VIDEO_DECODER
-                  (self), frame)) == GST_FLOW_OK) {
-        /* FIXME: This currently happens because of a race condition too.
-         * We first need to reconfigure the output port and then the input
-         * port if both need reconfiguration.
+       if (self->no_copy)
+       {
+         /*
+         * create output buffer use
+         * gst_omx_video_dec_create_buffer_from_omx_output(), which sets each
+         * plane address of an OMX output buffer to a new GstBuffer in order to
+         * pass output image data to the downstream plugin without memcpy.
          */
-        if (!gst_omx_video_dec_fill_buffer (self, buf, frame->output_buffer)) {
-          gst_buffer_replace (&frame->output_buffer, NULL);
-          flow_ret =
+         frame->output_buffer =gst_omx_video_dec_create_buffer_from_omx_output (self, buf);
+         if (!frame->output_buffer) {
+           GST_ERROR_OBJECT (self, "failed to create an output buffer");
+           flow_ret = GST_FLOW_ERROR;
+           goto flow_error;
+         }
+         gst_buffer_ref (frame->output_buffer);
+         flow_ret =
+           gst_video_decoder_finish_frame (GST_VIDEO_DECODER (self), frame);
+         gst_buffer_unref (frame->output_buffer);
+         frame = NULL;
+         buf = NULL;
+       } else {
+         if ((flow_ret =
+           gst_video_decoder_allocate_output_frame (GST_VIDEO_DECODER
+           (self), frame)) == GST_FLOW_OK) {
+          /* FIXME: This currently happens because of a race condition too.
+          * We first need to reconfigure the output port and then the input
+          * port if both need reconfiguration.
+          */
+          if (!gst_omx_video_dec_fill_buffer (self, buf, frame->output_buffer)) {
+            gst_buffer_replace (&frame->output_buffer, NULL);
+            flow_ret =
               gst_video_decoder_drop_frame (GST_VIDEO_DECODER (self), frame);
-          frame = NULL;
-          gst_omx_port_release_buffer (port, buf);
-          goto invalid_buffer;
+            frame = NULL;
+            gst_omx_port_release_buffer (port, buf);
+            goto invalid_buffer;
+          }
         }
         flow_ret =
             gst_video_decoder_finish_frame (GST_VIDEO_DECODER (self), frame);
@@ -2613,3 +2767,35 @@ gst_omx_video_dec_decide_allocation (GstVideoDecoder * bdec, GstQuery * query)
 
   return TRUE;
 }
+static void
+gst_omx_video_dec_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec)
+{
+  GstOMXVideoDec *self = GST_OMX_VIDEO_DEC (object);
+
+  switch (prop_id) {
+    case PROP_NO_COPY:
+    {
+      self->no_copy = g_value_get_boolean (value);
+      break;
+    }
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+static void
+gst_omx_video_dec_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec)
+{
+  GstOMXVideoDec *self = GST_OMX_VIDEO_DEC (object);
+
+  switch (prop_id) {
+    case PROP_NO_COPY:
+      g_value_set_boolean (value, self->no_copy);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
diff --git a/omx/gstomxvideodec.h b/omx/gstomxvideodec.h
index 3978865..08e3c9e 100644
--- a/omx/gstomxvideodec.h
+++ b/omx/gstomxvideodec.h
@@ -1,6 +1,7 @@
 /*
  * Copyright (C) 2011, Hewlett-Packard Development Company, L.P.
  *   Author: Sebastian Dröge <sebastian.droege@collabora.co.uk>, Collabora Ltd.
+ * Copyright (C) 2015, Renesas Electronics Corporation
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -77,6 +78,11 @@ struct _GstOMXVideoDec
   /* TRUE if upstream is EOS */
   gboolean eos;
 
+  /* Set TRUE to transfer decoded data to downstream without copy,
+   * use userptr instead
+   */
+  gboolean no_copy;
+
   GstFlowReturn downstream_flow_ret;
 #ifdef USE_OMX_TARGET_RPI
   GstOMXComponent *egl_render;
-- 
2.4.0

