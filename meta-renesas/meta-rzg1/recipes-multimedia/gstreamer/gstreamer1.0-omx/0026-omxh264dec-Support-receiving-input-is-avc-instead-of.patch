From 07a30faf6a6e87f152bbbbdc6a6a04ad6550f83a Mon Sep 17 00:00:00 2001
From: Thao Luong <thao.luong.uw@rvc.renesas.com>
Date: Wed, 27 May 2015 11:43:06 +0700
Subject: [PATCH 22/25] omxh264dec: Support receiving input is avc instead of 
 byte-stream

This patch allow receiving input is avc format instead of byte stream
Then it will analyze avc format stream to transform AVC format
to byte-stream and send it to MC

refs #69206
Signed-off-by: Thao Luong <thao.luong.uw@rvc.renesas.com>
---
 omx/gstomxh264dec.c  | 184 ++++++++++++++++++++++++++++++++++++++++++++++++++-
 omx/gstomxh264dec.h  |   2 +
 omx/gstomxvideodec.c |  43 +++++++++---
 omx/gstomxvideodec.h |   1 +
 4 files changed, 218 insertions(+), 12 deletions(-)

diff --git a/omx/gstomxh264dec.c b/omx/gstomxh264dec.c
index 094a22a..929a9b6 100644
--- a/omx/gstomxh264dec.c
+++ b/omx/gstomxh264dec.c
@@ -38,6 +38,8 @@ static gboolean gst_omx_h264_dec_is_format_change (GstOMXVideoDec * dec,
     GstOMXPort * port, GstVideoCodecState * state);
 static gboolean gst_omx_h264_dec_set_format (GstOMXVideoDec * dec,
     GstOMXPort * port, GstVideoCodecState * state);
+static gsize gst_omx_h264_dec_copy_frame_buffer (GstOMXVideoDec * dec,
+    GstBuffer * inbuf, guint offset, GstOMXBuffer * outbuf);
 
 enum
 {
@@ -62,11 +64,11 @@ gst_omx_h264_dec_class_init (GstOMXH264DecClass * klass)
   videodec_class->is_format_change =
       GST_DEBUG_FUNCPTR (gst_omx_h264_dec_is_format_change);
   videodec_class->set_format = GST_DEBUG_FUNCPTR (gst_omx_h264_dec_set_format);
+  videodec_class->copy_frame_buffer = GST_DEBUG_FUNCPTR (gst_omx_h264_dec_copy_frame_buffer);
 
   videodec_class->cdata.default_sink_template_caps = "video/x-h264, "
-      "parsed=(boolean) true, "
       "alignment=(string) au, "
-      "stream-format=(string) byte-stream, "
+      "stream-format=(string) avc, "
       "width=(int) [1,MAX], " "height=(int) [1,MAX]";
 
   gst_element_class_set_static_metadata (element_class,
@@ -90,16 +92,131 @@ gst_omx_h264_dec_is_format_change (GstOMXVideoDec * dec,
   return FALSE;
 }
 
+/* Retrieve necessary information from codec_data:
+ * retrieves sps and pps nals from codec_data, transformed 
+ * into bytestream*/
+
+static GstBuffer *
+gst_omx_h264_dec_retrieve_sps_pps (GstOMXH264Dec * self, guint8 * data)
+{
+  guint8 *ptr, *outbuf, *dest;
+  guint sps_num, pps_num;
+  guint *sps_size_list, *pps_size_list;
+  guint sps_pps_size = 0;
+  guint i;
+
+  ptr = data;
+
+  sps_num = ptr[5] & 0x1f;      /* reserved(3bit) + numOfSequenceParameterSets(uint 5bit) */
+
+  sps_size_list = g_malloc (sps_num);
+  if (!sps_size_list) {
+    GST_ERROR_OBJECT (self, "failed g_malloc");
+    return NULL;
+  }
+
+  ptr += 6;
+
+  for (i = 0; i < sps_num; i++) {
+    sps_size_list[i] = GST_READ_UINT16_BE (ptr);
+    ptr += sps_size_list[i] + 2;
+    sps_pps_size += sps_size_list[i] + 4;       /* take account of the start code length */
+  }
+
+  pps_num = *ptr++;             /* numOfPictureParameterSets (unint 8bit) */
+  pps_size_list = g_malloc (pps_num);
+  if (!pps_size_list) {
+    GST_ERROR_OBJECT (self, "failed g_malloc");
+    g_free (sps_size_list);
+    return NULL;
+  }
+
+  for (i = 0; i < pps_num; i++) {
+    pps_size_list[i] = GST_READ_UINT16_BE (ptr);
+    ptr += pps_size_list[i] + 2;
+    sps_pps_size += pps_size_list[i] + 4;       /* take account of the start code length */
+  }
+
+  outbuf = g_malloc (sps_pps_size);
+  if (!outbuf) {
+    GST_ERROR_OBJECT (self, "failed g_malloc");
+    g_free (sps_size_list);
+    g_free (pps_size_list);
+    return NULL;
+  }
+  dest = outbuf;
+
+  /* reset ptr */
+  ptr = data;
+
+  /* jump to sps data */
+  ptr += 8;
+  for (i = 0; i < sps_num; i++) {
+    dest[0] = 0x00;
+    dest[1] = 0x00;
+    dest[2] = 0x00;
+    dest[3] = 0x01;
+    memcpy (dest + 4, ptr, sps_size_list[i]);
+    dest += sps_size_list[i] + 4;
+    ptr += sps_size_list[i] + 2;
+  }
+
+  /* jump to pps data */
+  ptr++;
+  for (i = 0; i < pps_num; i++) {
+    dest[0] = 0x00;
+    dest[1] = 0x00;
+    dest[2] = 0x00;
+    dest[3] = 0x01;
+    memcpy (dest + 4, ptr, pps_size_list[i]);
+    dest += pps_size_list[i] + 4;
+    ptr += pps_size_list[i] + 2;
+  }
+
+  g_free (sps_size_list);
+  g_free (pps_size_list);
+
+  return gst_buffer_new_wrapped (outbuf, sps_pps_size);
+}
+
 static gboolean
 gst_omx_h264_dec_set_format (GstOMXVideoDec * dec, GstOMXPort * port,
     GstVideoCodecState * state)
 {
   gboolean ret;
   OMX_PARAM_PORTDEFINITIONTYPE port_def;
+  GstOMXH264Dec *self = GST_OMX_H264_DEC (dec);
+  OMX_ERRORTYPE err;
+  GstMapInfo map = GST_MAP_INFO_INIT;
+  GstBuffer *new_codec_data;
 
   gst_omx_port_get_port_definition (port, &port_def);
   port_def.format.video.eCompressionFormat = OMX_VIDEO_CodingAVC;
-  ret = gst_omx_port_update_port_definition (port, &port_def) == OMX_ErrorNone;
+  err = gst_omx_port_update_port_definition (port, &port_def);
+  if (err != OMX_ErrorNone)
+    return FALSE;
+
+  gst_buffer_map (state->codec_data, &map, GST_MAP_READ);
+
+  /* Get the nal length field size from lengthSizeMinusOne field,
+   * which is contained in AVC Configuration.
+   */
+  self->nal_length_field_size = (map.data[4] & 0x03) + 1;
+
+  /* Retrieve sps and pps nals from codec_data, transformed into bytestream */
+  new_codec_data = gst_omx_h264_dec_retrieve_sps_pps (self, map.data);
+  if (!new_codec_data) {
+    GST_ERROR_OBJECT (self,
+        "failed sps and pps nals retrieval from codec_data");
+    gst_buffer_unmap (state->codec_data, &map);
+    return FALSE;
+  }
+
+  gst_buffer_unmap (state->codec_data, &map);
+
+  gst_buffer_replace (&state->codec_data, new_codec_data);
+  gst_buffer_unref (new_codec_data);
+  ret = TRUE;
 
   {
     /*
@@ -154,3 +271,64 @@ gst_omx_h264_dec_set_format (GstOMXVideoDec * dec, GstOMXPort * port,
 
   return ret;
 }
+static gsize
+gst_omx_h264_dec_get_nal_size (GstOMXH264Dec * self, guint8 * buf)
+{
+  gsize nal_size = 0;
+  gint i;
+
+  for (i = 0; i < self->nal_length_field_size; i++)
+    nal_size = (nal_size << 8) | buf[i];
+
+  return nal_size;
+}
+
+static gsize
+gst_omx_h264_dec_copy_frame_buffer (GstOMXVideoDec * dec, GstBuffer * inbuf,
+    guint offset, GstOMXBuffer * outbuf)
+{
+  GstOMXH264Dec *self = GST_OMX_H264_DEC (dec);
+  gsize inbuf_size, nal_size, outbuf_size, output_amount = 0,
+      inbuf_consumed = 0;
+  GstMapInfo map = GST_MAP_INFO_INIT;
+  guint8 *in_data, *out_data;
+
+  gst_buffer_map (inbuf, &map, GST_MAP_READ);
+
+  /* Transform AVC format into bytestream and copy frames */
+  in_data = map.data + offset;
+  out_data = outbuf->omx_buf->pBuffer + outbuf->omx_buf->nOffset;
+  inbuf_size = gst_buffer_get_size (inbuf) - offset;
+  outbuf_size = outbuf->omx_buf->nAllocLen - outbuf->omx_buf->nOffset;
+  nal_size = gst_omx_h264_dec_get_nal_size (self, in_data);
+  while (output_amount + nal_size + 4 <= outbuf_size) {
+    guint inbuf_to_next, outbuf_to_next;
+
+    out_data[0] = 0x00;
+    out_data[1] = 0x00;
+    out_data[2] = 0x00;
+    out_data[3] = 0x01;
+
+    memcpy (out_data + 4, in_data + self->nal_length_field_size, nal_size);
+
+    outbuf_to_next = nal_size + 4;
+    out_data += outbuf_to_next;
+    output_amount += outbuf_to_next;
+
+    inbuf_to_next = nal_size + self->nal_length_field_size;
+    inbuf_consumed += inbuf_to_next;
+    if ((inbuf_size - inbuf_consumed) < self->nal_length_field_size)
+      /* the end of an input buffer */
+      break;
+
+    in_data += inbuf_to_next;
+
+    nal_size = gst_omx_h264_dec_get_nal_size (self, in_data);
+  }
+
+  gst_buffer_unmap (inbuf, &map);
+
+  outbuf->omx_buf->nFilledLen = output_amount;
+
+  return inbuf_consumed;
+}
diff --git a/omx/gstomxh264dec.h b/omx/gstomxh264dec.h
index 4c0ea1f..ae9523a 100644
--- a/omx/gstomxh264dec.h
+++ b/omx/gstomxh264dec.h
@@ -1,6 +1,7 @@
 /*
  * Copyright (C) 2011, Hewlett-Packard Development Company, L.P.
  *   Author: Sebastian Dr√∂ge <sebastian.droege@collabora.co.uk>, Collabora Ltd.
+ * Copyright (C) 2015, Renesas Electronics Corporation
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -45,6 +46,8 @@ typedef struct _GstOMXH264DecClass GstOMXH264DecClass;
 struct _GstOMXH264Dec
 {
   GstOMXVideoDec parent;
+
+  guint nal_length_field_size;
 };
 
 struct _GstOMXH264DecClass
diff --git a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
index d0c0e70..7f9db53 100644
--- a/omx/gstomxvideodec.c
+++ b/omx/gstomxvideodec.c
@@ -115,6 +115,27 @@ enum
 G_DEFINE_ABSTRACT_TYPE_WITH_CODE (GstOMXVideoDec, gst_omx_video_dec,
     GST_TYPE_VIDEO_DECODER, DEBUG_INIT);
 
+/* copy_frame_buffer will copy GstBuffer of input frame into OMXBuffer */
+static gsize
+gst_omx_video_dec_copy_frame_buffer (GstOMXVideoDec * self, GstBuffer * inbuf,
+    guint offset, GstOMXBuffer * outbuf)
+{
+  guint size;
+
+  size = gst_buffer_get_size (inbuf);
+
+  /* Copy the buffer content in chunks of size as requested
+   * by the port */
+  outbuf->omx_buf->nFilledLen =
+      MIN (size - offset,
+      outbuf->omx_buf->nAllocLen - outbuf->omx_buf->nOffset);
+  gst_buffer_extract (inbuf, offset,
+      outbuf->omx_buf->pBuffer + outbuf->omx_buf->nOffset,
+      outbuf->omx_buf->nFilledLen);
+
+  return outbuf->omx_buf->nFilledLen;
+}
+
 static void
 gst_omx_video_dec_class_init (GstOMXVideoDecClass * klass)
 {
@@ -168,6 +189,7 @@ gst_omx_video_dec_class_init (GstOMXVideoDecClass * klass)
           "Whether or not to use video frame reordering",
           FALSE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
            GST_PARAM_MUTABLE_READY));
+  klass->copy_frame_buffer = gst_omx_video_dec_copy_frame_buffer;
 }
 
 static void
@@ -2397,6 +2419,7 @@ gst_omx_video_dec_handle_frame (GstVideoDecoder * decoder,
   guint offset = 0, size;
   GstClockTime timestamp, duration;
   OMX_ERRORTYPE err;
+  gsize inbuf_consumed;
 
   self = GST_OMX_VIDEO_DEC (decoder);
   klass = GST_OMX_VIDEO_DEC_GET_CLASS (self);
@@ -2535,7 +2558,6 @@ gst_omx_video_dec_handle_frame (GstVideoDecoder * decoder,
       }
 
       buf->omx_buf->nFlags |= OMX_BUFFERFLAG_CODECCONFIG;
-      buf->omx_buf->nFlags |= OMX_BUFFERFLAG_ENDOFFRAME;
       buf->omx_buf->nFilledLen = gst_buffer_get_size (codec_data);;
       gst_buffer_extract (codec_data, 0,
           buf->omx_buf->pBuffer + buf->omx_buf->nOffset,
@@ -2560,13 +2582,12 @@ gst_omx_video_dec_handle_frame (GstVideoDecoder * decoder,
     /* Now handle the frame */
     GST_DEBUG_OBJECT (self, "Passing frame offset %d to the component", offset);
 
-    /* Copy the buffer content in chunks of size as requested
-     * by the port */
-    buf->omx_buf->nFilledLen =
-        MIN (size - offset, buf->omx_buf->nAllocLen - buf->omx_buf->nOffset);
-    gst_buffer_extract (frame->input_buffer, offset,
-        buf->omx_buf->pBuffer + buf->omx_buf->nOffset,
-        buf->omx_buf->nFilledLen);
+    inbuf_consumed = klass->copy_frame_buffer (self, frame->input_buffer, offset, buf);
+    if (inbuf_consumed < 0) {
+      GST_ERROR_OBJECT (self, "Failed to copy an input frame");
+      self->downstream_flow_ret = GST_FLOW_ERROR;
+      goto flow_error;
+    }
 
     if (timestamp != GST_CLOCK_TIME_NONE) {
       buf->omx_buf->nTimeStamp =
@@ -2592,10 +2613,14 @@ gst_omx_video_dec_handle_frame (GstVideoDecoder * decoder,
      *     the segment
      */
 
-    offset += buf->omx_buf->nFilledLen;
+    offset += inbuf_consumed;
 
     if (offset == size)
       buf->omx_buf->nFlags |= OMX_BUFFERFLAG_ENDOFFRAME;
+    /* OMX_BUFFERFLAG_CODECCONFIG flag is required if the Nal unit type
+     * is SPS or PPS */
+    if (GST_BUFFER_FLAG_IS_SET (frame->input_buffer, GST_BUFFER_FLAG_HEADER))
+      buf->omx_buf->nFlags |= OMX_BUFFERFLAG_CODECCONFIG;
 
     self->started = TRUE;
     err = gst_omx_port_release_buffer (port, buf);
diff --git a/omx/gstomxvideodec.h b/omx/gstomxvideodec.h
index 9bcac47..fb9b28a 100644
--- a/omx/gstomxvideodec.h
+++ b/omx/gstomxvideodec.h
@@ -104,6 +104,7 @@ struct _GstOMXVideoDecClass
   gboolean (*is_format_change) (GstOMXVideoDec * self, GstOMXPort * port, GstVideoCodecState * state);
   gboolean (*set_format)       (GstOMXVideoDec * self, GstOMXPort * port, GstVideoCodecState * state);
   GstFlowReturn (*prepare_frame)   (GstOMXVideoDec * self, GstVideoCodecFrame *frame);
+  gsize (*copy_frame_buffer) (GstOMXVideoDec * self, GstBuffer * inbuf, guint offset, GstOMXBuffer * outbuf);
 };
 
 GType gst_omx_video_dec_get_type (void);
-- 
2.4.0

