From 5d225143caa80e954d64d3e8f541124b4067a969 Mon Sep 17 00:00:00 2001
From: Long Dang <long.dang.aj@rvc.renesas.com>
Date: Thu, 11 Aug 2016 17:10:27 +0700
Subject: [PATCH 34/42] gst145-omxvideoenc: Support NV16

Porting from a patch in Linux 3.10 environment made by Thao Luong <thao.luong.uw@rvc.renesas.com>

This patch is workaround for difference format between v4l2src and omxh264enc
issue.
Currently, v4l2src supports NV16, UYVY, RGB565,...
omxh264enc supports for NV12 only
This patch will allow omxh264enc receive NV16 format, however it will convert to
NV12 before send to encode MC

refs #60740

Signed-off-by: Long Dang <long.dang.aj@rvc.renesas.com>
---
 omx/gstomxvideoenc.c | 74 +++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 73 insertions(+), 1 deletion(-)

diff --git a/omx/gstomxvideoenc.c b/omx/gstomxvideoenc.c
index 8cb35ae..a17afcb 100644
--- a/omx/gstomxvideoenc.c
+++ b/omx/gstomxvideoenc.c
@@ -186,7 +186,7 @@ gst_omx_video_enc_class_init (GstOMXVideoEncClass * klass)
       "width = " GST_VIDEO_SIZE_RANGE ", "
       "height = " GST_VIDEO_SIZE_RANGE ", "
       "framerate = " GST_VIDEO_FPS_RANGE ","
-      "format=(string) {I420, NV12}";
+      "format=(string) {I420, NV12, NV16}";
   klass->handle_output_frame =
       GST_DEBUG_FUNCPTR (gst_omx_video_enc_handle_output_frame);
 }
@@ -996,6 +996,9 @@ gst_omx_video_enc_set_format (GstVideoEncoder * encoder,
       case GST_VIDEO_FORMAT_I420:
         port_def.format.video.eColorFormat = OMX_COLOR_FormatYUV420Planar;
         break;
+      case GST_VIDEO_FORMAT_NV16:
+        port_def.format.video.eColorFormat = OMX_COLOR_FormatYUV422SemiPlanar;
+        break;
       case GST_VIDEO_FORMAT_NV12:
         port_def.format.video.eColorFormat = OMX_COLOR_FormatYUV420SemiPlanar;
         break;
@@ -1040,6 +1043,7 @@ gst_omx_video_enc_set_format (GstVideoEncoder * encoder,
           port_def.format.video.nStride = 2048;
         break;
       }
+      case OMX_COLOR_FormatYUV422SemiPlanar:
       case OMX_COLOR_FormatYUV420SemiPlanar:
         port_def.format.video.nStride = ((info->width + 127) & ~ 127);   /* Align 128 */
       break;
@@ -1064,6 +1068,7 @@ gst_omx_video_enc_set_format (GstVideoEncoder * encoder,
           ((port_def.format.video.nFrameHeight + 1) / 2));
       break;
 
+    case OMX_COLOR_FormatYUV422SemiPlanar:
     case OMX_COLOR_FormatYUV420SemiPlanar:
       port_def.nBufferSize =
           (port_def.format.video.nStride * port_def.format.video.nFrameHeight) +
@@ -1395,6 +1400,73 @@ gst_omx_video_enc_fill_buffer (GstOMXVideoEnc * self, GstBuffer * inbuf,
       ret = TRUE;
       break;
     }
+    case GST_VIDEO_FORMAT_NV16:{
+      gint i, j, height, width;
+      guint8 *src, *dest;
+      gint src_stride, dest_stride;
+
+      outbuf->omx_buf->nFilledLen = 0;
+
+      if (!gst_video_frame_map (&frame, info, inbuf, GST_MAP_READ)) {
+        GST_ERROR_OBJECT (self, "Invalid input buffer size");
+        ret = FALSE;
+        break;
+      }
+
+      for (i = 0; i < 2; i++) {
+        if (i == 0) {
+          dest_stride = port_def->format.video.nStride;
+          src_stride = GST_VIDEO_FRAME_COMP_STRIDE (&frame, 0);
+          /* XXX: Try this if no stride was set */
+          if (dest_stride == 0)
+            dest_stride = src_stride;
+        } else {
+          dest_stride = port_def->format.video.nStride;
+          src_stride = GST_VIDEO_FRAME_COMP_STRIDE (&frame, 1);
+
+          /* XXX: Try this if no stride was set */
+          if (dest_stride == 0)
+            dest_stride = src_stride;
+        }
+
+        dest = outbuf->omx_buf->pBuffer + outbuf->omx_buf->nOffset;
+        if (i == 1)
+          dest +=
+              port_def->format.video.nSliceHeight *
+              port_def->format.video.nStride;
+
+        src = GST_VIDEO_FRAME_COMP_DATA (&frame, i);
+        height = GST_VIDEO_FRAME_COMP_HEIGHT (&frame, i) / (i==0 ? 1 : 2);
+        width = GST_VIDEO_FRAME_COMP_WIDTH (&frame, i) * (i == 0 ? 1 : 2);
+
+        if (dest + dest_stride * height >
+            outbuf->omx_buf->pBuffer + outbuf->omx_buf->nAllocLen) {
+          gst_video_frame_unmap (&frame);
+          GST_ERROR_OBJECT (self, "Invalid output buffer size");
+          ret = FALSE;
+          break;
+        }
+        /* Convert NV16 to NV12 */
+        if (i==0)
+          for (j = 0; j < height; j++) {
+            memcpy (dest, src, width);
+            outbuf->omx_buf->nFilledLen += dest_stride;
+            src += src_stride;
+            dest += dest_stride;
+          }
+        if (i==1)
+          for (j = 0; j < height; j++) {
+            src += src_stride;
+            memcpy (dest, src, width);
+            outbuf->omx_buf->nFilledLen += dest_stride;
+            src += src_stride;
+            dest += dest_stride;
+          }
+      }
+      gst_video_frame_unmap (&frame);
+      ret = TRUE;
+      break;
+    }
     default:
       GST_ERROR_OBJECT (self, "Unsupported format");
       goto done;
-- 
1.9.1

