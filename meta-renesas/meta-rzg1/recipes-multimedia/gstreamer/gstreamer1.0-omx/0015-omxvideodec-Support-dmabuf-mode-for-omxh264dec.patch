From b343e9d6525557afcaa52763e00b04565c221c9d Mon Sep 17 00:00:00 2001
From: Thao Luong <thao.luong.uw@rvc.renesas.com>
Date: Wed, 27 May 2015 11:24:54 +0700
Subject: [PATCH 11/25] omxvideodec: Support dmabuf mode for omxh264dec

This patch will add use_dmabuf mode that use to choose dmabuf
method when send data to downstream.
Currently, when using dmabuf mode need library of mmngrbuf.
In general, this patch will export dmabuf file descriptors
with the MMP mmngrbuf API and attach them to output buffers

To export dmabuf file descriptors, the physical address which is
obtained from the decoding result of each frame has to be passed
into the dmabuf exporter API.

If downstream has supported videosink_buffer_creation_request query
The GstBuffer associated with the dmabuf descriptor will be created
in downstream through this query
If downstream has not supported this query, GstBuffer
associated with the dmabuf descriptor will be created on omxh264dec

The default of use_dmabuf is true

Ex:
gst-launch-1.0 filesrc location=file.mp4 ! qtdemux ! h264parse ! omxh264dec ! vspfilter ! video/x-raw,format=BGRA ! waylandsink

refs #69206
Signed-off-by: Thao Luong <thao.luong.uw@rvc.renesas.com>
---
 configure.ac           |   6 ++
 omx/Makefile.am        |   1 +
 omx/gstomxbufferpool.c | 193 +++++++++++++++++++++++++++++++++++++++++++++----
 omx/gstomxbufferpool.h |  11 +++
 omx/gstomxvideodec.c   |  36 +++++++--
 omx/gstomxvideodec.h   |   2 +
 6 files changed, 229 insertions(+), 20 deletions(-)

diff --git a/configure.ac b/configure.ac
index d0da0fa..404eace 100644
--- a/configure.ac
+++ b/configure.ac
@@ -261,6 +261,12 @@ elif test x"$ac_cv_omx_target_struct_packing" != x"none"; then
   AC_DEFINE_UNQUOTED(GST_OMX_STRUCT_PACKING, $ac_cv_omx_target_struct_packing, [The struct packing used for OpenMAX structures])
 fi
 
+dnl check mmngrbuf library to use dmabuf exporter
+AC_CHECK_LIB([mmngrbuf], [mmngr_export_start_in_user],
+             [AC_DEFINE(HAVE_MMNGRBUF, 1, [Define if you have mmngrbuf library])
+              GST_LIBS="$GST_LIBS -lmmngrbuf"
+             ])
+
 dnl *** set variables based on configure arguments ***
 
 dnl set license and copyright notice
diff --git a/omx/Makefile.am b/omx/Makefile.am
index ad95334..246d68c 100644
--- a/omx/Makefile.am
+++ b/omx/Makefile.am
@@ -80,6 +80,7 @@ libgstomx_la_LIBADD = \
 	-lgstaudio-@GST_API_VERSION@ \
 	-lgstpbutils-@GST_API_VERSION@ \
 	-lgstvideo-@GST_API_VERSION@ \
+	-lgstallocators-@GST_API_VERSION@ \
 	$(GST_BASE_LIBS) \
 	$(GST_LIBS) \
 	$(GMODULE_NO_EXPORT_LIBS)
diff --git a/omx/gstomxbufferpool.c b/omx/gstomxbufferpool.c
index a86a4df..2eb2f67 100644
--- a/omx/gstomxbufferpool.c
+++ b/omx/gstomxbufferpool.c
@@ -25,6 +25,7 @@
 #endif
 
 #include "gstomxbufferpool.h"
+#include "gstomxvideodec.h"
 
 GST_DEBUG_CATEGORY_STATIC (gst_omx_buffer_pool_debug_category);
 #define GST_CAT_DEFAULT gst_omx_buffer_pool_debug_category
@@ -125,7 +126,7 @@ gst_omx_memory_allocator_init (GstOMXMemoryAllocator * allocator)
 
   GST_OBJECT_FLAG_SET (allocator, GST_ALLOCATOR_FLAG_CUSTOM_ALLOC);
 }
-
+#ifndef HAVE_MMNGRBUF
 static GstMemory *
 gst_omx_memory_allocator_alloc (GstAllocator * allocator, GstMemoryFlags flags,
     GstOMXBuffer * buf, gsize offset, gsize size)
@@ -161,6 +162,7 @@ gst_omx_memory_allocator_alloc (GstAllocator * allocator, GstMemoryFlags flags,
 
   return GST_MEMORY_CAST (mem);
 }
+#endif
 
 /* Buffer pool for the buffers of an OpenMAX port.
  *
@@ -428,10 +430,15 @@ gst_omx_buffer_pool_alloc_buffer (GstBufferPool * bpool,
     }
 
     buf = gst_buffer_new ();
-    for (i = 0; i < GST_VIDEO_INFO_N_PLANES (&pool->video_info); i++)
-      gst_buffer_append_memory (buf,
-          gst_omx_memory_allocator_alloc (pool->allocator, 0, omx_buf,
-              offset[i], plane_size[i]));
+#ifndef HAVE_MMNGRBUF
+    if (GST_OMX_VIDEO_DEC(pool->element)->use_dmabuf == FALSE)
+    {
+      for (i = 0; i < GST_VIDEO_INFO_N_PLANES (&pool->video_info); i++)
+        gst_buffer_append_memory (buf,
+            gst_omx_memory_allocator_alloc (pool->allocator, 0, omx_buf,
+                offset[i], plane_size[i]));
+    }
+#endif
 
     g_ptr_array_add (pool->buffers, buf);
 
@@ -470,6 +477,12 @@ gst_omx_buffer_pool_alloc_buffer (GstBufferPool * bpool,
       /* Initialize an already_acquired flag */
       vdbuf_data = g_slice_new (GstOMXVideoDecBufferData);
       vdbuf_data->already_acquired = FALSE;
+
+#ifdef HAVE_MMNGRBUF
+    if (GST_OMX_VIDEO_DEC(pool->element)->use_dmabuf)
+      for (i = 0; i < GST_VIDEO_MAX_PLANES; i++)
+        vdbuf_data->id_export[i] = -1;
+#endif
   
       omx_buf->private_data = (void *) vdbuf_data;
     }
@@ -490,6 +503,10 @@ gst_omx_buffer_pool_free_buffer (GstBufferPool * bpool, GstBuffer * buffer)
 {
   GstOMXBufferPool *pool = GST_OMX_BUFFER_POOL (bpool);
   GstOMXBuffer *omx_buf;
+#ifdef HAVE_MMNGRBUF
+  GstOMXVideoDecBufferData *vdbuf_data;
+  gint i;
+#endif
 
   /* If the buffers belong to another pool, restore them now */
   GST_OBJECT_LOCK (pool);
@@ -503,6 +520,13 @@ gst_omx_buffer_pool_free_buffer (GstBufferPool * bpool, GstBuffer * buffer)
       gst_mini_object_get_qdata (GST_MINI_OBJECT_CAST (buffer),
       pool->gst_omx_buffer_data_quark);
 
+#ifdef HAVE_MMNGRBUF
+  vdbuf_data = (GstOMXVideoDecBufferData *) omx_buf->private_data;
+  for (i = 0; i < GST_VIDEO_MAX_PLANES; i++)
+    if (vdbuf_data->id_export[i] >= 0)
+      mmngr_export_end_in_user (vdbuf_data->id_export[i]);
+#endif
+
   g_slice_free (gboolean, omx_buf->private_data);
 
   gst_mini_object_set_qdata (GST_MINI_OBJECT_CAST (buffer),
@@ -512,6 +536,68 @@ gst_omx_buffer_pool_free_buffer (GstBufferPool * bpool, GstBuffer * buffer)
       buffer);
 }
 
+#ifdef HAVE_MMNGRBUF
+static GstBuffer *
+gst_omx_buffer_pool_request_videosink_buffer_creation (GstOMXBufferPool * pool,
+    gint dmabuf_fd[GST_VIDEO_MAX_PLANES], gint stride[GST_VIDEO_MAX_PLANES])
+{
+  GstQuery *query;
+  GValue val = { 0, };
+  GstStructure *structure;
+  const GValue *value;
+  GstBuffer *buffer;
+  GArray *dmabuf_array;
+  GArray *stride_array;
+  gint n_planes;
+  gint i;
+
+  g_value_init (&val, G_TYPE_POINTER);
+  g_value_set_pointer (&val, (gpointer) pool->allocator);
+
+  dmabuf_array = g_array_new (FALSE, FALSE, sizeof (gint));
+  stride_array = g_array_new (FALSE, FALSE, sizeof (gint));
+
+  n_planes = GST_VIDEO_INFO_N_PLANES (&pool->video_info);
+  for (i = 0; i < n_planes; i++) {
+    g_array_append_val (dmabuf_array, dmabuf_fd[i]);
+    g_array_append_val (stride_array, stride[i]);
+  }
+
+  structure = gst_structure_new ("videosink_buffer_creation_request",
+      "width", G_TYPE_INT, pool->port->port_def.format.video.nFrameWidth,
+      "height", G_TYPE_INT, pool->port->port_def.format.video.nFrameHeight,
+      "stride", G_TYPE_ARRAY, stride_array,
+      "dmabuf", G_TYPE_ARRAY, dmabuf_array,
+      "allocator", G_TYPE_POINTER, &val,
+      "format", G_TYPE_STRING,
+      gst_video_format_to_string (pool->video_info.finfo->format),
+      "n_planes", G_TYPE_INT, n_planes, NULL);
+
+  query = gst_query_new_custom (GST_QUERY_CUSTOM, structure);
+
+  GST_DEBUG_OBJECT (pool, "send a videosink_buffer_creation_request query");
+
+  if (!gst_pad_peer_query (GST_VIDEO_DECODER_SRC_PAD (pool->element), query)) {
+    GST_ERROR_OBJECT (pool, "videosink_buffer_creation_request query failed");
+    return NULL;
+  }
+
+  value = gst_structure_get_value (structure, "buffer");
+  buffer = gst_value_get_buffer (value);
+  if (buffer == NULL) {
+    GST_ERROR_OBJECT (pool,
+        "could not get a buffer from videosink_buffer_creation query");
+    return NULL;
+  }
+
+  gst_query_unref (query);
+  g_array_free (dmabuf_array, TRUE);
+  g_array_free (stride_array, TRUE);
+
+  return buffer;
+}
+#endif
+
 static GstFlowReturn
 gst_omx_buffer_pool_acquire_buffer (GstBufferPool * bpool,
     GstBuffer ** buffer, GstBufferPoolAcquireParams * params)
@@ -528,26 +614,98 @@ gst_omx_buffer_pool_acquire_buffer (GstBufferPool * bpool,
 
     buf = g_ptr_array_index (pool->buffers, pool->current_buffer_index);
     g_return_val_if_fail (buf != NULL, GST_FLOW_ERROR);
-    *buffer = buf;
+
+    if (GST_OMX_VIDEO_DEC(pool->element)->use_dmabuf == FALSE)
+      *buffer = buf;
 
     omx_buf =
         gst_mini_object_get_qdata (GST_MINI_OBJECT_CAST (buf),
         pool->gst_omx_buffer_data_quark);
 
     vdbuf_data = (GstOMXVideoDecBufferData *) omx_buf->private_data;
+#ifdef HAVE_MMNGRBUF
+    if (GST_OMX_VIDEO_DEC(pool->element)->use_dmabuf)
+    {
+      guint n_mem;
+      n_mem = gst_buffer_n_memory (buf);
+      if (n_mem == 0) {
+        GstBuffer *new_buf;
+        GstVideoMeta *vmeta;
+        gint n_planes;
+        gint i;
+        gint dmabuf_fd[GST_VIDEO_MAX_PLANES];
+        gint plane_size[GST_VIDEO_MAX_PLANES];
+  
+        GST_DEBUG_OBJECT (pool, "Create dmabuf mem pBuffer=%p",
+            omx_buf->omx_buf->pBuffer);
+  
+        vmeta = gst_buffer_get_video_meta (buf);
+  
+        n_planes = GST_VIDEO_INFO_N_PLANES (&pool->video_info);
+        for (i = 0; i < n_planes; i++) {
+          gint res;
+          guint phys_addr;
+          OMXR_MC_VIDEO_DECODERESULTTYPE *decode_res =
+              (OMXR_MC_VIDEO_DECODERESULTTYPE *) omx_buf->
+              omx_buf->pOutputPortPrivate;
+  
+          phys_addr = (guint) decode_res->pvPhysImageAddressY + vmeta->offset[i];
+          plane_size[i] = vmeta->stride[i] * vmeta->height;
+  
+          res =
+              mmngr_export_start_in_user (&vdbuf_data->id_export[i],
+              plane_size[i], (unsigned long) phys_addr, &dmabuf_fd[i]);
+          if (res != R_MM_OK) {
+            GST_ERROR_OBJECT (pool,
+                "mmngr_export_start_in_user failed (phys_addr:0x%08x)",
+                phys_addr);
+            return GST_FLOW_ERROR;
+          }
+  
+          GST_DEBUG_OBJECT (pool,
+              "Export dmabuf:%d id_export:%d (phys_addr:0x%08x)", dmabuf_fd[i],
+              vdbuf_data->id_export[i], phys_addr);
+        }
+  
+        if (pool->vsink_buf_req_supported)
+          new_buf = gst_omx_buffer_pool_request_videosink_buffer_creation (pool,
+              dmabuf_fd, vmeta->stride);
+        else {
+          new_buf = gst_buffer_new ();
+          for (i = 0; i < n_planes; i++)
+            gst_buffer_append_memory (new_buf,
+                gst_dmabuf_allocator_alloc (pool->allocator, dmabuf_fd[i],
+                    plane_size[i]));
+  
+          gst_buffer_add_video_meta_full (new_buf, GST_VIDEO_FRAME_FLAG_NONE,
+              GST_VIDEO_INFO_FORMAT (&pool->video_info),
+              GST_VIDEO_INFO_WIDTH (&pool->video_info),
+              GST_VIDEO_INFO_HEIGHT (&pool->video_info),
+              GST_VIDEO_INFO_N_PLANES (&pool->video_info), vmeta->offset,
+              vmeta->stride);
+        }
+  
+        g_ptr_array_remove_index (pool->buffers, pool->current_buffer_index);
+  
+        gst_mini_object_set_qdata (GST_MINI_OBJECT_CAST (buf),
+            pool->gst_omx_buffer_data_quark, NULL, NULL);
+  
+        gst_buffer_unref (buf);
+  
+        gst_mini_object_set_qdata (GST_MINI_OBJECT_CAST (new_buf),
+            pool->gst_omx_buffer_data_quark, omx_buf, NULL);
+  
+        g_ptr_array_add (pool->buffers, new_buf);
+  
+        *buffer = new_buf;
+      } else
+        *buffer = buf;
+    }
+#endif
     vdbuf_data->already_acquired = TRUE;
 
     ret = GST_FLOW_OK;
 
-    /* If it's our own memory we have to set the sizes */
-    if (!pool->other_pool) {
-      GstMemory *mem = gst_buffer_peek_memory (*buffer, 0);
-
-      g_assert (mem
-          && g_strcmp0 (mem->allocator->mem_type, GST_OMX_MEMORY_TYPE) == 0);
-      mem->size = ((GstOMXMemory *) mem)->buf->omx_buf->nFilledLen;
-      mem->offset = ((GstOMXMemory *) mem)->buf->omx_buf->nOffset;
-    }
   } else {
     /* Acquire any buffer that is available to be filled by upstream */
     ret =
@@ -658,7 +816,11 @@ static void
 gst_omx_buffer_pool_init (GstOMXBufferPool * pool)
 {
   pool->buffers = g_ptr_array_new ();
+#ifdef HAVE_MMNGRBUF
+  pool->allocator = gst_dmabuf_allocator_new ();
+#else
   pool->allocator = g_object_new (gst_omx_memory_allocator_get_type (), NULL);
+#endif
   pool->gst_omx_buffer_data_quark = g_quark_from_static_string ("GstOMXBufferData");
 }
 
@@ -672,6 +834,7 @@ gst_omx_buffer_pool_new (GstElement * element, GstOMXComponent * component,
   pool->element = gst_object_ref (element);
   pool->component = component;
   pool->port = port;
+  pool->vsink_buf_req_supported = FALSE;
 
   return GST_BUFFER_POOL (pool);
 }
diff --git a/omx/gstomxbufferpool.h b/omx/gstomxbufferpool.h
index f2e53ff..3558ef9 100644
--- a/omx/gstomxbufferpool.h
+++ b/omx/gstomxbufferpool.h
@@ -30,6 +30,11 @@
 #include <gst/video/gstvideopool.h>
 
 #include "gstomx.h"
+#ifdef HAVE_MMNGRBUF
+#include "gst/allocators/gstdmabuf.h"
+#include "mmngr_buf_user_public.h"
+#include "OMXR_Extension_vdcmn.h"
+#endif
 
 G_BEGIN_DECLS
 
@@ -81,6 +86,9 @@ struct _GstOMXBufferPool
   gint current_buffer_index;
   /* GQuark contain name of user pointer point to OMX buffer of output */
   GQuark gst_omx_buffer_data_quark;
+  /* TRUE if the downstream buffer pool can handle
+   * "videosink_buffer_creation_request" query */
+  gboolean vsink_buf_req_supported;
 };
 
 struct _GstOMXBufferPoolClass
@@ -91,6 +99,9 @@ struct _GstOMXBufferPoolClass
 struct _GstOMXVideoDecBufferData
 {
   gboolean already_acquired;
+#ifdef HAVE_MMNGRBUF
+  gint id_export[GST_VIDEO_MAX_PLANES];
+#endif
 };
 
 GType gst_omx_buffer_pool_get_type (void);
diff --git a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
index 8ccbc5b..15eba8f 100644
--- a/omx/gstomxvideodec.c
+++ b/omx/gstomxvideodec.c
@@ -99,7 +99,8 @@ static void GstOMXBufCallbackfunc (struct GstOMXBufferCallback *release);
 enum
 {
   PROP_0,
-  PROP_NO_COPY
+  PROP_NO_COPY,
+  PROP_USE_DMABUF
 };
 
 /* class initialization */
@@ -153,6 +154,11 @@ gst_omx_video_dec_class_init (GstOMXVideoDecClass * klass)
       "Whether or not to transfer decoded data without copy",
       FALSE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
       GST_PARAM_MUTABLE_READY));
+  g_object_class_install_property (gobject_class, PROP_USE_DMABUF,
+      g_param_spec_boolean ("use-dmabuf", "Use dmabuffer ",
+        "Whether or not to transfer decoded data using dmabuf",
+        TRUE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+        GST_PARAM_MUTABLE_READY));
 }
 
 static void
@@ -163,6 +169,9 @@ gst_omx_video_dec_init (GstOMXVideoDec * self)
   g_mutex_init (&self->drain_lock);
   g_cond_init (&self->drain_cond);
   self->no_copy = FALSE;
+#ifdef HAVE_MMNGRBUF
+  self->use_dmabuf = TRUE;
+#endif
 }
 
 static gboolean
@@ -2224,10 +2233,11 @@ gst_omx_video_dec_set_format (GstVideoDecoder * decoder,
       if (gst_omx_port_allocate_buffers (self->dec_out_port) != OMX_ErrorNone)
         return FALSE;
     }
-    /* Create buffer pool for output port */
-    self->out_port_pool =
-        gst_omx_buffer_pool_new (GST_ELEMENT_CAST (self), self->dec,
-        self->dec_out_port);
+    if (self->use_dmabuf)
+      /* Create buffer pool for output port */
+      self->out_port_pool =
+          gst_omx_buffer_pool_new (GST_ELEMENT_CAST (self), self->dec,
+          self->dec_out_port);
 
     if (gst_omx_component_get_state (self->dec,
             GST_CLOCK_TIME_NONE) != OMX_StateIdle)
@@ -2785,6 +2795,15 @@ gst_omx_video_dec_decide_allocation (GstVideoDecoder * bdec, GstQuery * query)
   /* Set up buffer pool and notify it to parent class */
   self = GST_OMX_VIDEO_DEC (bdec);
   if (self->out_port_pool) {
+    g_assert (gst_query_get_n_allocation_pools (query) > 0);
+    gst_query_parse_nth_allocation_pool (query, 0, &pool, NULL, NULL, NULL);
+    g_assert (pool != NULL);
+
+    config = gst_buffer_pool_get_config (pool);
+    gst_structure_get_boolean (config,
+        "videosink_buffer_creation_request_supported",
+        &GST_OMX_BUFFER_POOL (self->out_port_pool)->vsink_buf_req_supported);
+    gst_object_unref (pool);
     /* Set pool parameters to our own configuration */
     config = gst_buffer_pool_get_config (self->out_port_pool);
     gst_buffer_pool_config_add_option (config,
@@ -2847,8 +2866,12 @@ gst_omx_video_dec_set_property (GObject * object, guint prop_id,
     case PROP_NO_COPY:
     {
       self->no_copy = g_value_get_boolean (value);
+      self->use_dmabuf = FALSE;
       break;
     }
+    case PROP_USE_DMABUF:
+      self->use_dmabuf = g_value_get_boolean (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -2864,6 +2887,9 @@ gst_omx_video_dec_get_property (GObject * object, guint prop_id,
     case PROP_NO_COPY:
       g_value_set_boolean (value, self->no_copy);
       break;
+    case PROP_USE_DMABUF:
+      g_value_set_boolean (value, self->use_dmabuf);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
diff --git a/omx/gstomxvideodec.h b/omx/gstomxvideodec.h
index 08e3c9e..80c853d 100644
--- a/omx/gstomxvideodec.h
+++ b/omx/gstomxvideodec.h
@@ -82,6 +82,8 @@ struct _GstOMXVideoDec
    * use userptr instead
    */
   gboolean no_copy;
+  /* Set TRUE to transfer decoded data to downstream using dmabuf */
+  gboolean use_dmabuf;
 
   GstFlowReturn downstream_flow_ret;
 #ifdef USE_OMX_TARGET_RPI
-- 
2.4.0

