From 6e3fa34d226bcadca015a0025cc15ce02f3159b9 Mon Sep 17 00:00:00 2001
From: Dmitry Shifrin <dmitry.shifrin@cogentembedded.com>
Date: Thu, 28 Jul 2016 09:29:18 +0300
Subject: [PATCH] fix z and z2 clk for r8a7793 and r8a7794

---
 arch/arm/boot/dts/r8a7793.dtsi       | 13 ++++++-
 arch/arm/boot/dts/r8a7794.dtsi       | 13 ++++++-
 drivers/clk/shmobile/clk-rcar-gen2.c | 71 ++++++++++++++++++++++++++++++++++--
 3 files changed, 89 insertions(+), 8 deletions(-)

diff --git a/arch/arm/boot/dts/r8a7793.dtsi b/arch/arm/boot/dts/r8a7793.dtsi
index c465404..256943a 100644
--- a/arch/arm/boot/dts/r8a7793.dtsi
+++ b/arch/arm/boot/dts/r8a7793.dtsi
@@ -28,7 +28,7 @@
 			reg = <0>;
 			clock-frequency = <1500000000>;
 			voltage-tolerance = <1>; /* 1% */
-			clocks = <&cpg_clocks R8A7793_CLK_Z>;
+			clocks = <&z>;
 			clock-latency = <300000>; /* 300 us */
 
 			/* kHz - uV - OPPs unknown yet */
@@ -168,7 +168,7 @@
 			clocks = <&extal_clk>;
 			#clock-cells = <1>;
 			clock-output-names = "main", "pll0", "pll1", "pll3",
-					     "lb", "qspi", "sdh", "sd0", "z",
+					     "lb", "qspi", "sdh", "sd0",
 					     "rcan", "adsp";
 			#power-domain-cells = <0>;
 		};
@@ -200,6 +200,15 @@
 		};
 
 		/* Fixed factor clocks */
+		z: z {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7793_CLK_PLL0>;
+			#clock-cells = <0>;
+			clock-div = <3>;
+			clock-mult = <1>;
+			clock-output-names = "z";
+		};
+
 		pll1_div2_clk: pll1_div2_clk {
 			compatible = "fixed-factor-clock";
 			clocks = <&cpg_clocks R8A7793_CLK_PLL1>;
diff --git a/arch/arm/boot/dts/r8a7794.dtsi b/arch/arm/boot/dts/r8a7794.dtsi
index de38ad4..4ef2e72 100644
--- a/arch/arm/boot/dts/r8a7794.dtsi
+++ b/arch/arm/boot/dts/r8a7794.dtsi
@@ -45,7 +45,7 @@
 			compatible = "arm,cortex-a7";
 			reg = <0>;
 			clock-frequency = <1000000000>;
-			power-domains = <&sysc R8A7794_PD_CA7_CPU0>;
+			power-domains = <&z2>;
 			next-level-cache = <&L2_CA7>;
 		};
 
@@ -926,7 +926,7 @@
 			clocks = <&extal_clk>;
 			#clock-cells = <1>;
 			clock-output-names = "main", "pll0", "pll1", "pll3",
-					     "lb", "qspi", "sdh", "sd0", "z";
+					     "lb", "qspi", "sdh", "sd0";
 			#power-domain-cells = <0>;
 		};
 		/* Variable factor clocks */
@@ -953,6 +953,15 @@
 		};
 
 		/* Fixed factor clocks */
+		z2: z2 {
+			compatible = "fixed-factor-clock";
+			clocks = <&cpg_clocks R8A7794_CLK_PLL0>;
+			#clock-cells = <0>;
+			clock-div = <3>;
+			clock-mult = <1>;
+			clock-output-names = "z2";
+		};
+
 		pll1_div2_clk: pll1_div2_clk {
 			compatible = "fixed-factor-clock";
 			clocks = <&cpg_clocks R8A7794_CLK_PLL1>;
diff --git a/drivers/clk/shmobile/clk-rcar-gen2.c b/drivers/clk/shmobile/clk-rcar-gen2.c
index 745496f..2f69e3d 100644
--- a/drivers/clk/shmobile/clk-rcar-gen2.c
+++ b/drivers/clk/shmobile/clk-rcar-gen2.c
@@ -267,6 +267,9 @@ static struct clk * __init cpg_adsp_clk_register(struct rcar_gen2_cpg *cpg)
 #define CPG_PLL_CONFIG_INDEX(md)	((((md) & BIT(14)) >> 12) | \
 					 (((md) & BIT(13)) >> 12) | \
 					 (((md) & BIT(19)) >> 19))
+
+#define CPG_PLL0_CONFIG_INDEX(md)	(CPG_PLL_CONFIG_INDEX(md) >> 1)
+
 struct cpg_pll_config {
 	unsigned int extal_div;
 	unsigned int pll1_mult;
@@ -295,11 +298,59 @@ static const struct clk_div_table cpg_sd01_div_table[] = {
  * Initialization
  */
 
+
+struct pll0_config_data{
+	bool is_devider_fixed;
+	unsigned int mult_ratio_table[4];
+};
+
+
+static struct pll0_config_data fix_pll0_ratio = {
+	.is_devider_fixed = true,
+	.mult_ratio_table = {
+		200, 150, 230, 200	
+	} /* See tables 7.5b and 7.5c */
+};
+
+static struct pll0_config_data var_pll0_ratio = {
+	.is_devider_fixed = false
+};
+
+static const struct of_device_id cpg_of_match[] = {
+	{
+		.compatible = "renesas,r8a7790-cpg-clocks",
+		.data = &var_pll0_ratio,
+	},
+
+	{
+		.compatible = "renesas,r8a7791-cpg-clocks",
+		.data = &var_pll0_ratio,
+	},
+
+	{
+		.compatible = "renesas,r8a7792-cpg-clocks",
+		.data = &fix_pll0_ratio,
+	},
+
+	{
+		.compatible = "renesas,r8a7793-cpg-clocks",
+		.data = &var_pll0_ratio,
+	},
+
+	{
+		.compatible = "renesas,r8a7794-cpg-clocks",
+		.data = &fix_pll0_ratio,
+	},
+	{}
+};
+
+
 static u32 cpg_mode __initdata;
 
 static struct clk * __init
 rcar_gen2_cpg_register_clock(struct device_node *np, struct rcar_gen2_cpg *cpg,
-			     const struct cpg_pll_config *config,
+			     const struct cpg_pll_config *config, 
+			     const struct pll0_config_data *data,
 			     const char *name)
 {
 	const struct clk_div_table *table = NULL;
@@ -317,9 +368,13 @@ rcar_gen2_cpg_register_clock(struct device_node *np, struct rcar_gen2_cpg *cpg,
 		 * clock implementation and we currently have no need to change
 		 * the multiplier value.
 		 */
-		u32 value = clk_readl(cpg->reg + CPG_PLL0CR);
 		parent_name = "main";
-		mult = ((value >> 24) & ((1 << 7) - 1)) + 1;
+		if (data->is_devider_fixed)
+			mult = data->mult_ratio_table[CPG_PLL0_CONFIG_INDEX(cpg_mode)];
+		else {
+			u32 value = clk_readl(cpg->reg + CPG_PLL0CR);
+			mult = ((value >> 24) & ((1 << 7) - 1)) + 1;
+		}
 	} else if (!strcmp(name, "pll1")) {
 		parent_name = "main";
 		mult = config->pll1_mult / 2;
@@ -346,6 +401,7 @@ rcar_gen2_cpg_register_clock(struct device_node *np, struct rcar_gen2_cpg *cpg,
 		table = cpg_sd01_div_table;
 		shift = 0;
 	} else if (!strcmp(name, "z")) {
+		if (data->is_devider_fixed) return ERR_PTR(-EINVAL);
 		return cpg_z_clk_register(cpg);
 	} else if (!strcmp(name, "rcan")) {
 		return cpg_rcan_clk_register(cpg, np);
@@ -366,12 +422,19 @@ rcar_gen2_cpg_register_clock(struct device_node *np, struct rcar_gen2_cpg *cpg,
 
 static void __init rcar_gen2_cpg_clocks_init(struct device_node *np)
 {
+	const struct of_device_id *match;
 	const struct cpg_pll_config *config;
 	struct rcar_gen2_cpg *cpg;
 	struct clk **clks;
 	unsigned int i;
 	int num_clks;
 
+	match = of_match_node(cpg_of_match, np);
+	if (!match) {
+		pr_err("%s: No matching data\n", __func__);
+		return;
+	}
+
 	num_clks = of_property_count_strings(np, "clock-output-names");
 	if (num_clks < 0) {
 		pr_err("%s: failed to count clocks\n", __func__);
@@ -406,7 +469,7 @@ static void __init rcar_gen2_cpg_clocks_init(struct device_node *np)
 		of_property_read_string_index(np, "clock-output-names", i,
 					      &name);
 
-		clk = rcar_gen2_cpg_register_clock(np, cpg, config, name);
+		clk = rcar_gen2_cpg_register_clock(np, cpg, config, match->data, name);
 		if (IS_ERR(clk))
 			pr_err("%s: failed to register %s %s clock (%ld)\n",
 			       __func__, np->name, name, PTR_ERR(clk));
-- 
1.9.1

